// Ejecutar en consola para solucionar errores de migraci√≥n
async function solucionarErroresMigracion() {
    console.log('üîß Solucionando errores de migraci√≥n...');
    
    try {
        // 1. Verificar que Firebase est√© disponible
        if (typeof firebase === 'undefined') {
            console.error('‚ùå Firebase no est√° disponible');
            return;
        }

        const db = window.getFirestore();
        if (!db) {
            console.error('‚ùå Firestore no est√° disponible');
            return;
        }

        // 2. Crear √≠ndices necesarios
        console.log('üìä Verificando √≠ndices...');
        
        // 3. Limpiar documentos problem√°ticos
        console.log('üßπ Limpiando documentos con problemas...');
        
        const collections = ['solicitudes_ingreso', 'citas', 'atenciones', 'reingresos'];
        
        for (const collectionName of collections) {
            try {
                const snapshot = await db.collection(collectionName).limit(5).get();
                console.log(`‚úÖ ${collectionName}: ${snapshot.size} documentos accesibles`);
            } catch (error) {
                console.error(`‚ùå Error en ${collectionName}:`, error);
            }
        }

        // 4. Verificar sistema de ID unificado
        if (window.generarIdPaciente) {
            const testRut = '12345678-9';
            const testId = window.generarIdPaciente(testRut);
            console.log(`‚úÖ Sistema de ID funcional: ${testRut} ‚Üí ${testId}`);
        } else {
            console.error('‚ùå Sistema de ID unificado no disponible');
        }

        console.log('‚úÖ Verificaci√≥n completada');
        
    } catch (error) {
        console.error('‚ùå Error durante la verificaci√≥n:', error);
    }
}

// Funci√≥n para reinicializar completamente
function reinicializarSistema() {
    console.log('üîÑ Reinicializando sistema SENDA...');
    
    // Limpiar cach√©
    if (window.cacheLimpiarTodo) {
        window.cacheLimpiarTodo();
    }
    
    // Recargar p√°gina
    setTimeout(() => {
        window.location.reload();
    }, 1000);
}

// Ejecutar autom√°ticamente
solucionarErroresMigracion();
